rm(list=ls(all=TRUE))
Final=data.frame()
Dirs <- dir("../../Body/2Derived/codon_usage/") # /home/popadin/devil-worm/Body/2Derived
for (i in 1 : length(Dirs))
{ # i = 1
Path=paste('../../Body/2Derived/codon_usage/',Dirs[i],sep='')
if (file.exists(Path))
{
Species = gsub('(.*)_','',Path); Species = gsub('.tsv','',Species); Species = gsub(' ','_',Species);
if (Species != '.')
{
sp = read.table(Path, head = TRUE)
#### RENAME
VecOfOldNames = colnames(sp)
VecOfNewNames=c()
for (j in 1:length(VecOfOldNames))
{ # j = 1
temp = gsub('(.*)\\.','',VecOfOldNames[j])
temp = toupper(temp)
VecOfNewNames = c(VecOfNewNames,temp)
}
names(sp)=VecOfNewNames
#### COUNT TOTAL CODON USAGE AND SAVE TWO-COLUMN FILE:
sp$Total = 0
for (k in 1:nrow(sp)) { sp$Total[k]=  sum(sp[k,]) }
sp$Codons = row.names(sp)
sp=sp[colnames(sp) %in% c('Total','Codons')]
names(sp)[1]=Species;
#### MERGE WITH FINAL
if (i == 1) {Final = sp}
if (i > 1) {Final = merge(Final,sp, by = 'Codons')}
}
}
}
rm(list=ls(all=TRUE))
Final=data.frame()
Dirs <- dir("../../Body/2Derived/codon_usage/") # /home/popadin/devil-worm/Body/2Derived
i = 1
Path=paste('../../Body/2Derived/codon_usage/',Dirs[i],sep='')
(file.exists(Path))
Species = gsub('(.*)_','',Path); Species = gsub('.tsv','',Species); Species = gsub(' ','_',Species);
Species
(Species != '.')
sp = read.table(Path, head = TRUE)
Path
rm(list=ls(all=TRUE))
Final=data.frame()
Dirs <- dir("../../Body/2Derived/codon_usage/") # /home/popadin/devil-worm/Body/2Derived
length(Dirs)
i = 1
Path=paste('../../Body/2Derived/codon_usage/',Dirs[i],sep='')
Path
(file.exists(Path))
Species = gsub('(.*)_','',Path); Species = gsub('.tsv','',Species); Species = gsub(' ','_',Species);
Species != '.'
sp = read.table(Path, head = TRUE)
Path
sp = read.table('../../Body/2Derived/codon_usage/AF538716_Brugia malayi.tsv', head = TRUE)
rm(list=ls(all=TRUE))
Final=data.frame()
Dirs <- dir("../../Body/2Derived/CodonUsageOld/") # /home/popadin/devil-worm/Body/2Derived
i = 1
Path=paste('../../Body/2Derived/CodonUsageOld/',Dirs[i],sep='')
(file.exists(Path))
Species = gsub('(.*)_','',Path); Species = gsub('.tsv','',Species); Species = gsub(' ','_',Species);
sp = read.table(Path, head = TRUE)
rm(list=ls(all=TRUE))
Final=data.frame()
Dirs <- dir("../../Body/2Derived/CodonUsageOld/") # /home/popadin/devil-worm/Body/2Derived
for (i in 1 : length(Dirs))
{ # i = 1
Path=paste('../../Body/2Derived/CodonUsageOld/',Dirs[i],sep='')
if (file.exists(Path))
{
Species = gsub('(.*)_','',Path); Species = gsub('.tsv','',Species); Species = gsub(' ','_',Species);
if (Species != '.')
{
sp = read.table(Path, head = TRUE)
#### RENAME
VecOfOldNames = colnames(sp)
VecOfNewNames=c()
for (j in 1:length(VecOfOldNames))
{ # j = 1
temp = gsub('(.*)\\.','',VecOfOldNames[j])
temp = toupper(temp)
VecOfNewNames = c(VecOfNewNames,temp)
}
names(sp)=VecOfNewNames
#### COUNT TOTAL CODON USAGE AND SAVE TWO-COLUMN FILE:
sp$Total = 0
for (k in 1:nrow(sp)) { sp$Total[k]=  sum(sp[k,]) }
sp$Codons = row.names(sp)
sp=sp[colnames(sp) %in% c('Total','Codons')]
names(sp)[1]=Species;
#### MERGE WITH FINAL
if (i == 1) {Final = sp}
if (i > 1) {Final = merge(Final,sp, by = 'Codons')}
}
}
}
write.table(Final,"../../Body/3Results/01.CodonUsageParser.TotalCodonTable.txt")
VecOfFourFoldDegSites = c(
'TCA','TCT','TCG','TCC',
'CTA','CTT','CTG','CTC',
'CCA','CCT','CCG','CCC',
'CGA','CGT','CGG','CGC',
'ACA','ACT','ACG','ACC',
'AGA','AGT','AGG','AGC',
'GTA','GTT','GTG','GTC',
'GCA','GCT','GCG','GCC',
'GGA','GGT','GGG','GGC')
FourFold = Final[Final$Codons %in% VecOfFourFoldDegSites,]
FourFold = FourFold[order(FourFold$Codons),]
# even by eye we can see an excess of T and A
LastA = c('TCA','CTA','CCA','CGA','ACA','AGA','GTA','GCA','GGA')
LastT = c('TCT','CTT','CCT','CGT','ACT','AGT','GTT','GCT','GGT')
LastG = c('TCG','CTG','CCG','CGG','ACG','AGG','GTG','GCG','GGG')
LastC = c('TCC','CTC','CCC','CGC','ACC','AGC','GTC','GCC','GGC')
FourFoldLastA = Final[Final$Codons %in% LastA,];
FourFoldLastA = FourFoldLastA[!colnames(FourFoldLastA) %in% 'Codons'];
A=data.frame(apply(FourFoldLastA,2,sum)); names(A)=c('A')
FourFoldLastT = Final[Final$Codons %in% LastT,];
FourFoldLastT = FourFoldLastT[!colnames(FourFoldLastT) %in% 'Codons'];
T=data.frame(apply(FourFoldLastT,2,sum)); names(T)=c('T')
FourFoldLastG = Final[Final$Codons %in% LastG,];
FourFoldLastG = FourFoldLastG[!colnames(FourFoldLastG) %in% 'Codons'];
G=data.frame(apply(FourFoldLastG,2,sum)); names(G)=c('G')
FourFoldLastC = Final[Final$Codons %in% LastC,];
FourFoldLastC = FourFoldLastC[!colnames(FourFoldLastC) %in% 'Codons'];
C=data.frame(apply(FourFoldLastC,2,sum)); names(C)=c('C')
ATGC = cbind(A,T,G,C)
ATGC$FrA = ATGC$A/(ATGC$A+ATGC$T+ATGC$G+ATGC$C)
ATGC$FrT = ATGC$T/(ATGC$A+ATGC$T+ATGC$G+ATGC$C)
ATGC$FrG = ATGC$G/(ATGC$A+ATGC$T+ATGC$G+ATGC$C)
ATGC$FrC = ATGC$C/(ATGC$A+ATGC$T+ATGC$G+ATGC$C)
ATGC$FrAT = (ATGC$A+ATGC$T)/(ATGC$A+ATGC$T+ATGC$G+ATGC$C)
ATGC$FrGC = (ATGC$G+ATGC$C)/(ATGC$A+ATGC$T+ATGC$G+ATGC$C)
ATGC = ATGC[order(ATGC$FrT),]
write.table(ATGC,"../../Body/3Results/01.CodonUsageParser.ATGCFreqAtFourFoldDegSites.txt")
## by hand:
## rename unitig_62_quiver_annotated_Trimmed_CURATED_ANNOTATIONS_..tsv into unitig_62_quiver_annotated_Trimmed_CURATED_ANNOTATIONS_Halicephalobus mephisto.tsv
## pachys_mito_Bracht_Curated_synthetic DNA construct_..tsv into pachys_mito_Bracht_Curated_synthetic DNA construct_Diploscapter pachys.tsv
rm(list=ls(all=TRUE))
Final=data.frame()
Dirs <- dir("../../Body/2Derived/CodonUsageOld/") # /home/popadin/devil-worm/Body/2Derived
for (i in 1 : length(Dirs))
{ # i = 1
Path=paste('../../Body/2Derived/CodonUsageOld/',Dirs[i],sep='')
if (file.exists(Path))
{
Species = gsub('(.*)_','',Path); Species = gsub('.tsv','',Species); Species = gsub(' ','_',Species);
if (Species != '.')
{
sp = read.table(Path, head = TRUE)
#### RENAME
VecOfOldNames = colnames(sp)
VecOfNewNames=c()
for (j in 1:length(VecOfOldNames))
{ # j = 1
temp = gsub('(.*)\\.','',VecOfOldNames[j])
temp = toupper(temp)
VecOfNewNames = c(VecOfNewNames,temp)
}
names(sp)=VecOfNewNames
#### COUNT TOTAL CODON USAGE AND SAVE TWO-COLUMN FILE:
sp$Total = 0
for (k in 1:nrow(sp)) { sp$Total[k]=  sum(sp[k,]) }
sp$Codons = row.names(sp)
sp=sp[colnames(sp) %in% c('Total','Codons')]
names(sp)[1]=Species;
#### MERGE WITH FINAL
if (i == 1) {Final = sp}
if (i > 1) {Final = merge(Final,sp, by = 'Codons')}
}
}
}
write.table(Final,"../../Body/3Results/01.CodonUsageParserOld.TotalCodonTable.txt")
########## ANALYSIS OF THE TOTAL CODON USAGE
###### ONLY FOUR FOLD DEGENER SITES FROM GENETIC CODE 5
VecOfFourFoldDegSites = c(
'TCA','TCT','TCG','TCC',
'CTA','CTT','CTG','CTC',
'CCA','CCT','CCG','CCC',
'CGA','CGT','CGG','CGC',
'ACA','ACT','ACG','ACC',
'AGA','AGT','AGG','AGC',
'GTA','GTT','GTG','GTC',
'GCA','GCT','GCG','GCC',
'GGA','GGT','GGG','GGC')
FourFold = Final[Final$Codons %in% VecOfFourFoldDegSites,]
FourFold = FourFold[order(FourFold$Codons),]
# even by eye we can see an excess of T and A
LastA = c('TCA','CTA','CCA','CGA','ACA','AGA','GTA','GCA','GGA')
LastT = c('TCT','CTT','CCT','CGT','ACT','AGT','GTT','GCT','GGT')
LastG = c('TCG','CTG','CCG','CGG','ACG','AGG','GTG','GCG','GGG')
LastC = c('TCC','CTC','CCC','CGC','ACC','AGC','GTC','GCC','GGC')
FourFoldLastA = Final[Final$Codons %in% LastA,];
FourFoldLastA = FourFoldLastA[!colnames(FourFoldLastA) %in% 'Codons'];
A=data.frame(apply(FourFoldLastA,2,sum)); names(A)=c('A')
FourFoldLastT = Final[Final$Codons %in% LastT,];
FourFoldLastT = FourFoldLastT[!colnames(FourFoldLastT) %in% 'Codons'];
T=data.frame(apply(FourFoldLastT,2,sum)); names(T)=c('T')
FourFoldLastG = Final[Final$Codons %in% LastG,];
FourFoldLastG = FourFoldLastG[!colnames(FourFoldLastG) %in% 'Codons'];
G=data.frame(apply(FourFoldLastG,2,sum)); names(G)=c('G')
FourFoldLastC = Final[Final$Codons %in% LastC,];
FourFoldLastC = FourFoldLastC[!colnames(FourFoldLastC) %in% 'Codons'];
C=data.frame(apply(FourFoldLastC,2,sum)); names(C)=c('C')
ATGC = cbind(A,T,G,C)
ATGC$FrA = ATGC$A/(ATGC$A+ATGC$T+ATGC$G+ATGC$C)
ATGC$FrT = ATGC$T/(ATGC$A+ATGC$T+ATGC$G+ATGC$C)
ATGC$FrG = ATGC$G/(ATGC$A+ATGC$T+ATGC$G+ATGC$C)
ATGC$FrC = ATGC$C/(ATGC$A+ATGC$T+ATGC$G+ATGC$C)
ATGC$FrAT = (ATGC$A+ATGC$T)/(ATGC$A+ATGC$T+ATGC$G+ATGC$C)
ATGC$FrGC = (ATGC$G+ATGC$C)/(ATGC$A+ATGC$T+ATGC$G+ATGC$C)
ATGC = ATGC[order(ATGC$FrT),]
write.table(ATGC,"../../Body/3Results/01.CodonUsageParserOld.ATGCFreqAtFourFoldDegSites.txt")
### an excess of T in mephisto can be very low A>G on opposite chain, or high C>T on light strand
### all low-Ne species becomes AT rich (endosymbisys => no reparatio)
### AMINOACIDS:
#TCX Ser1
#CTX Leu
#CCX Pro
#CGX Arg
#ACX Thr
#AGX Ser2
#GTX Val
#GCX Ala
#GGX Gly
###### GA SKEW
rm(list=ls(all=TRUE))
CU <- read.table("../../Body/2Derived/CodonUsageDerived.csv")
CU <- read.table("../../Body/2Derived/CodonUsageDerived.csv", sep = ';')
View(CU)
CU <- read.table("../../Body/2Derived/CodonUsageDerived.csv", sep = ';', head = TRUE)
View(CU)
table(CU$OrganismName)
table(CU$GenName)
table(CU$OrganismName)
length(CU$OrganismName)
length(unique(CU$OrganismName))
VecOfSpecies = unique(CU$OrganismName)
temp = CU[CU$OrganismName == VecOfSpecies[i],]
i = 1
temp = CU[CU$OrganismName == VecOfSpecies[i],]
View(temp)
View(temp)
View(CU)
CU$Ser.T = CU$AGT/(CU$AGA+CU$AGT+CU$AGG+CU$AGC)
summary(CU$Ser.T)
View(CU)
View(CU)
table(CU$Strand)
CU = CU[CU$Strand == 1,]
length(unique(CU$OrganismName)) # 37
table(CU$OrganismName)
names(CU)
CUAgg = aggregate(CU[8,71], by = CU$GenName, FUN = sum)
CUAgg = aggregate(CU[8,71], by = list(CU$GenName), FUN = sum)
CUAgg = aggregate(CU[8:71], by = list(CU$GenName), FUN = sum)
View(CUAgg)
CUAggBySpecies = aggregate(CU[8:71], by = list(CU$OrganismName), FUN = sum) # as soon as gene names are good => check it better
View(CUAggBySpecies)
names(CUAggBySpecies)[1]='OrganismName'
View(CUAggBySpecies)
CUAggBySpecies$Ser.T = CUAggBySpecies$AGT/(CUAggBySpecies$AGA+CUAggBySpecies$AGT+CUAggBySpecies$AGG+CUAggBySpecies$AGC)
CUAggBySpecies$SerAG.T = CUAggBySpecies$AGT/(CUAggBySpecies$AGA+CUAggBySpecies$AGT+CUAggBySpecies$AGG+CUAggBySpecies$AGC) # AGX = Ser
CUAggBySpecies$SerTC.T = CUAggBySpecies$TCT/(CUAggBySpecies$TCA+CUAggBySpecies$TCT+CUAggBySpecies$TCG+CUAggBySpecies$TCC) # AGX = Ser.TC
CUAggBySpecies$Leu.T = CUAggBySpecies$AGT/(CUAggBySpecies$AGA+CUAggBySpecies$AGT+CUAggBySpecies$AGG+CUAggBySpecies$AGC) # TCX = Leu
CUAggBySpecies$SerAG.T = CUAggBySpecies$AGT/(CUAggBySpecies$AGA+CUAggBySpecies$AGT+CUAggBySpecies$AGG+CUAggBySpecies$AGC) # AGX = Ser.AG
CUAggBySpecies$SerTC.T = CUAggBySpecies$TCT/(CUAggBySpecies$TCA+CUAggBySpecies$TCT+CUAggBySpecies$TCG+CUAggBySpecies$TCC) # AGX = Ser.TC
CUAggBySpecies$Leu.T = CUAggBySpecies$CTT/(CUAggBySpecies$CTA+CUAggBySpecies$CTT+CUAggBySpecies$CTG+CUAggBySpecies$CTC) # CTX = Leu
CUAggBySpecies$Pro.T = CUAggBySpecies$CCT/(CUAggBySpecies$CCA+CUAggBySpecies$CCT+CUAggBySpecies$CCG+CUAggBySpecies$CCC) # CCX = Pro
View(CUAggBySpecies)
View(CUAggBySpecies)
CUAggBySpecies$SkewTowardsTFour4Dsites = (CUAggBySpecies$SerAG.T+CUAggBySpecies$SerTC.T+CUAggBySpecies$Leu.T+CUAggBySpecies$Pro.T)/4
CUAggBySpecies$SkewTowardsTFour4Dsites = (CUAggBySpecies$SerAG.T+CUAggBySpecies$SerTC.T+CUAggBySpecies$Leu.T+CUAggBySpecies$Pro.T)/4  # change to all AA
CUAggBySpecies = CUAggBySpecies[order(CUAggBySpecies$SkewTowardsTFour4Dsites),]
View(CUAggBySpecies)
## by hand:
## rename unitig_62_quiver_annotated_Trimmed_CURATED_ANNOTATIONS_..tsv into unitig_62_quiver_annotated_Trimmed_CURATED_ANNOTATIONS_Halicephalobus mephisto.tsv
## pachys_mito_Bracht_Curated_synthetic DNA construct_..tsv into pachys_mito_Bracht_Curated_synthetic DNA construct_Diploscapter pachys.tsv
rm(list=ls(all=TRUE))
CU <- read.table("../../Body/2Derived/CodonUsageDerived.csv", sep = ';', head = TRUE)
table(CU$OrganismName)
length(unique(CU$OrganismName)) # 37
table(CU$Strand)  #
table(CU$GenName) # should be 13
#atp6       ATP6       ATP8        cob       cox1       Cox1       COX1       cox2       COX2       cox3       COX3       CYTB  Dpa-atp-6
#1         36          7          1          1          1         33          1         34          1         34         34          1
#Dpa-ctb-1  Dpa-ctc-3 Dpa-ndfl-4 Dpa-nduo-1 Dpa-nduo-2 Dpa-nduo-5 Dpa-nduo-6       nad1       NAD1       nad2       NAD2       nad3       NAD3
#1          1          1          1          1          1          1          1          2          1          2          1          2
#nad4       NAD4      nad4L      NAD4L       nad5       NAD5       nad6       NAD6        ND1        ND2        ND3        ND4       ND4L
#1          2          1          2          1          2          1          2         32         32         36         33         32
#ND5        ND6       None
#32         32         12
#### -1 strand (who they are?) if we are sure => we just reverse compliment in the next step? For now we delete them
CU = CU[CU$Strand == 1,]
table(CU$OrganismName)
#### aggregate all data by species
names(CU)
CUAggByGenes = aggregate(CU[8:71], by = list(CU$GenName), FUN = sum) # as soon as gene names are good => check it better
CUAggBySpecies = aggregate(CU[8:71], by = list(CU$OrganismName), FUN = sum) # as soon as gene names are good => check it better
names(CUAggBySpecies)[1]='OrganismName'
### derive skew towards T for fourfold degenerate sits (default is 25%) (assume invertebrate genetic code, will remove homo sapiens later):
CUAggBySpecies$SerAG.T = CUAggBySpecies$AGT/(CUAggBySpecies$AGA+CUAggBySpecies$AGT+CUAggBySpecies$AGG+CUAggBySpecies$AGC) # AGX = Ser.AG
CUAggBySpecies$SerTC.T = CUAggBySpecies$TCT/(CUAggBySpecies$TCA+CUAggBySpecies$TCT+CUAggBySpecies$TCG+CUAggBySpecies$TCC) # AGX = Ser.TC
CUAggBySpecies$Leu.T = CUAggBySpecies$CTT/(CUAggBySpecies$CTA+CUAggBySpecies$CTT+CUAggBySpecies$CTG+CUAggBySpecies$CTC) # CTX = Leu
CUAggBySpecies$Pro.T = CUAggBySpecies$CCT/(CUAggBySpecies$CCA+CUAggBySpecies$CCT+CUAggBySpecies$CCG+CUAggBySpecies$CCC) # CCX = Pro
# . . .  ADD ALL Aminoacids coded by 4 codons
CUAggBySpecies$SkewTowardsT4Dsites = (CUAggBySpecies$SerAG.T+CUAggBySpecies$SerTC.T+CUAggBySpecies$Leu.T+CUAggBySpecies$Pro.T)/4  # change to all AA
CUAggBySpecies = CUAggBySpecies[order(CUAggBySpecies$SkewTowardsT4Dsites),]
View(CUAggBySpecies)
CUAggBySpecies$Arg.T = CUAggBySpecies$CGT/(CUAggBySpecies$CGA+CUAggBySpecies$CGT+CUAggBySpecies$CGG+CUAggBySpecies$CGC) # CCX = Pro
CUAggBySpecies$Thr.T = CUAggBySpecies$ACT/(CUAggBySpecies$ACA+CUAggBySpecies$ACT+CUAggBySpecies$ACG+CUAggBySpecies$ACC) # ACX == Thr (R)
CUAggBySpecies$Val.T = CUAggBySpecies$GTT/(CUAggBySpecies$GTA+CUAggBySpecies$GTT+CUAggBySpecies$GTG+CUAggBySpecies$GTC) # GTX == Val
CUAggBySpecies$Ala.T = CUAggBySpecies$GCT/(CUAggBySpecies$GCA+CUAggBySpecies$GCT+CUAggBySpecies$GCG+CUAggBySpecies$GCC) # GCX == Ala
CUAggBySpecies$SerAG.T = CUAggBySpecies$AGT/(CUAggBySpecies$AGA+CUAggBySpecies$AGT+CUAggBySpecies$AGG+CUAggBySpecies$AGC) # AGX = Ser.AG
CUAggBySpecies$SerTC.T = CUAggBySpecies$TCT/(CUAggBySpecies$TCA+CUAggBySpecies$TCT+CUAggBySpecies$TCG+CUAggBySpecies$TCC) # AGX = Ser.TC
CUAggBySpecies$Leu.T = CUAggBySpecies$CTT/(CUAggBySpecies$CTA+CUAggBySpecies$CTT+CUAggBySpecies$CTG+CUAggBySpecies$CTC) # CTX = Leu
CUAggBySpecies$Pro.T = CUAggBySpecies$CCT/(CUAggBySpecies$CCA+CUAggBySpecies$CCT+CUAggBySpecies$CCG+CUAggBySpecies$CCC) # CCX = Pro
CUAggBySpecies$Arg.T = CUAggBySpecies$CGT/(CUAggBySpecies$CGA+CUAggBySpecies$CGT+CUAggBySpecies$CGG+CUAggBySpecies$CGC) # CGX == Arg (R)
CUAggBySpecies$Thr.T = CUAggBySpecies$ACT/(CUAggBySpecies$ACA+CUAggBySpecies$ACT+CUAggBySpecies$ACG+CUAggBySpecies$ACC) # ACX == Thr
CUAggBySpecies$Val.T = CUAggBySpecies$GTT/(CUAggBySpecies$GTA+CUAggBySpecies$GTT+CUAggBySpecies$GTG+CUAggBySpecies$GTC) # GTX == Val
CUAggBySpecies$Ala.T = CUAggBySpecies$GCT/(CUAggBySpecies$GCA+CUAggBySpecies$GCT+CUAggBySpecies$GCG+CUAggBySpecies$GCC) # GCX == Ala
CUAggBySpecies$Gly.T = CUAggBySpecies$GGT/(CUAggBySpecies$GGA+CUAggBySpecies$GGT+CUAggBySpecies$GGG+CUAggBySpecies$GGC) # GGX == Gly (G)
View(CUAggBySpecies)
## by hand:
## rename unitig_62_quiver_annotated_Trimmed_CURATED_ANNOTATIONS_..tsv into unitig_62_quiver_annotated_Trimmed_CURATED_ANNOTATIONS_Halicephalobus mephisto.tsv
## pachys_mito_Bracht_Curated_synthetic DNA construct_..tsv into pachys_mito_Bracht_Curated_synthetic DNA construct_Diploscapter pachys.tsv
rm(list=ls(all=TRUE))
CU <- read.table("../../Body/2Derived/CodonUsageDerived.csv", sep = ';', head = TRUE)
table(CU$OrganismName)
length(unique(CU$OrganismName)) # 37
table(CU$Strand)  #
table(CU$GenName) # should be 13
#atp6       ATP6       ATP8        cob       cox1       Cox1       COX1       cox2       COX2       cox3       COX3       CYTB  Dpa-atp-6
#1         36          7          1          1          1         33          1         34          1         34         34          1
#Dpa-ctb-1  Dpa-ctc-3 Dpa-ndfl-4 Dpa-nduo-1 Dpa-nduo-2 Dpa-nduo-5 Dpa-nduo-6       nad1       NAD1       nad2       NAD2       nad3       NAD3
#1          1          1          1          1          1          1          1          2          1          2          1          2
#nad4       NAD4      nad4L      NAD4L       nad5       NAD5       nad6       NAD6        ND1        ND2        ND3        ND4       ND4L
#1          2          1          2          1          2          1          2         32         32         36         33         32
#ND5        ND6       None
#32         32         12
#### -1 strand (who they are?) if we are sure => we just reverse compliment in the next step? For now we delete them
CU = CU[CU$Strand == 1,]
table(CU$OrganismName)
#### aggregate all data by species
names(CU)
CUAggByGenes = aggregate(CU[8:71], by = list(CU$GenName), FUN = sum) # as soon as gene names are good => check it better
CUAggBySpecies = aggregate(CU[8:71], by = list(CU$OrganismName), FUN = sum) # as soon as gene names are good => check it better
names(CUAggBySpecies)[1]='OrganismName'
### derive skew towards T for fourfold degenerate sits (default is 25%) (assume invertebrate genetic code, will remove homo sapiens later):
CUAggBySpecies$SerAG.T = CUAggBySpecies$AGT/(CUAggBySpecies$AGA+CUAggBySpecies$AGT+CUAggBySpecies$AGG+CUAggBySpecies$AGC) # AGX = Ser.AG
CUAggBySpecies$SerTC.T = CUAggBySpecies$TCT/(CUAggBySpecies$TCA+CUAggBySpecies$TCT+CUAggBySpecies$TCG+CUAggBySpecies$TCC) # AGX = Ser.TC
CUAggBySpecies$Leu.T = CUAggBySpecies$CTT/(CUAggBySpecies$CTA+CUAggBySpecies$CTT+CUAggBySpecies$CTG+CUAggBySpecies$CTC) # CTX = Leu
CUAggBySpecies$Pro.T = CUAggBySpecies$CCT/(CUAggBySpecies$CCA+CUAggBySpecies$CCT+CUAggBySpecies$CCG+CUAggBySpecies$CCC) # CCX = Pro
CUAggBySpecies$Arg.T = CUAggBySpecies$CGT/(CUAggBySpecies$CGA+CUAggBySpecies$CGT+CUAggBySpecies$CGG+CUAggBySpecies$CGC) # CGX == Arg (R)
CUAggBySpecies$Thr.T = CUAggBySpecies$ACT/(CUAggBySpecies$ACA+CUAggBySpecies$ACT+CUAggBySpecies$ACG+CUAggBySpecies$ACC) # ACX == Thr
CUAggBySpecies$Val.T = CUAggBySpecies$GTT/(CUAggBySpecies$GTA+CUAggBySpecies$GTT+CUAggBySpecies$GTG+CUAggBySpecies$GTC) # GTX == Val
CUAggBySpecies$Ala.T = CUAggBySpecies$GCT/(CUAggBySpecies$GCA+CUAggBySpecies$GCT+CUAggBySpecies$GCG+CUAggBySpecies$GCC) # GCX == Ala
CUAggBySpecies$Gly.T = CUAggBySpecies$GGT/(CUAggBySpecies$GGA+CUAggBySpecies$GGT+CUAggBySpecies$GGG+CUAggBySpecies$GGC) # GGX == Gly (G)
View(CUAggBySpecies)
names(CUAggBySpecies)
## by hand:
## rename unitig_62_quiver_annotated_Trimmed_CURATED_ANNOTATIONS_..tsv into unitig_62_quiver_annotated_Trimmed_CURATED_ANNOTATIONS_Halicephalobus mephisto.tsv
## pachys_mito_Bracht_Curated_synthetic DNA construct_..tsv into pachys_mito_Bracht_Curated_synthetic DNA construct_Diploscapter pachys.tsv
rm(list=ls(all=TRUE))
CU <- read.table("../../Body/2Derived/CodonUsageDerived.csv", sep = ';', head = TRUE)
table(CU$OrganismName)
length(unique(CU$OrganismName)) # 37
table(CU$Strand)  #
table(CU$GenName) # should be 13
#atp6       ATP6       ATP8        cob       cox1       Cox1       COX1       cox2       COX2       cox3       COX3       CYTB  Dpa-atp-6
#1         36          7          1          1          1         33          1         34          1         34         34          1
#Dpa-ctb-1  Dpa-ctc-3 Dpa-ndfl-4 Dpa-nduo-1 Dpa-nduo-2 Dpa-nduo-5 Dpa-nduo-6       nad1       NAD1       nad2       NAD2       nad3       NAD3
#1          1          1          1          1          1          1          1          2          1          2          1          2
#nad4       NAD4      nad4L      NAD4L       nad5       NAD5       nad6       NAD6        ND1        ND2        ND3        ND4       ND4L
#1          2          1          2          1          2          1          2         32         32         36         33         32
#ND5        ND6       None
#32         32         12
#### -1 strand (who they are?) if we are sure => we just reverse compliment in the next step? For now we delete them
CU = CU[CU$Strand == 1,]
table(CU$OrganismName)
#### aggregate all data by species
names(CU)
CUAggByGenes = aggregate(CU[8:71], by = list(CU$GenName), FUN = sum) # as soon as gene names are good => check it better
CUAggBySpecies = aggregate(CU[8:71], by = list(CU$OrganismName), FUN = sum) # as soon as gene names are good => check it better
names(CUAggBySpecies)[1]='OrganismName'
### derive skew towards T for fourfold degenerate sites (expectation is 25%) (assume invertebrate genetic code, will remove homo sapiens later):
CUAggBySpecies$SerAG.T = CUAggBySpecies$AGT/(CUAggBySpecies$AGA+CUAggBySpecies$AGT+CUAggBySpecies$AGG+CUAggBySpecies$AGC) # AGX = Ser.AG
CUAggBySpecies$SerTC.T = CUAggBySpecies$TCT/(CUAggBySpecies$TCA+CUAggBySpecies$TCT+CUAggBySpecies$TCG+CUAggBySpecies$TCC) # AGX = Ser.TC
CUAggBySpecies$Leu.T = CUAggBySpecies$CTT/(CUAggBySpecies$CTA+CUAggBySpecies$CTT+CUAggBySpecies$CTG+CUAggBySpecies$CTC) # CTX = Leu
CUAggBySpecies$Pro.T = CUAggBySpecies$CCT/(CUAggBySpecies$CCA+CUAggBySpecies$CCT+CUAggBySpecies$CCG+CUAggBySpecies$CCC) # CCX = Pro
CUAggBySpecies$Arg.T = CUAggBySpecies$CGT/(CUAggBySpecies$CGA+CUAggBySpecies$CGT+CUAggBySpecies$CGG+CUAggBySpecies$CGC) # CGX == Arg (R)
CUAggBySpecies$Thr.T = CUAggBySpecies$ACT/(CUAggBySpecies$ACA+CUAggBySpecies$ACT+CUAggBySpecies$ACG+CUAggBySpecies$ACC) # ACX == Thr
CUAggBySpecies$Val.T = CUAggBySpecies$GTT/(CUAggBySpecies$GTA+CUAggBySpecies$GTT+CUAggBySpecies$GTG+CUAggBySpecies$GTC) # GTX == Val
CUAggBySpecies$Ala.T = CUAggBySpecies$GCT/(CUAggBySpecies$GCA+CUAggBySpecies$GCT+CUAggBySpecies$GCG+CUAggBySpecies$GCC) # GCX == Ala
CUAggBySpecies$Gly.T = CUAggBySpecies$GGT/(CUAggBySpecies$GGA+CUAggBySpecies$GGT+CUAggBySpecies$GGG+CUAggBySpecies$GGC) # GGX == Gly (G)
names(CUAggBySpecies)
CUAggBySpecies = apply(1, CUAggBySpecies[66:74], mean)
CUAggBySpecies = apply(1, as.matrix(CUAggBySpecies[66:74]), mean)
CUAggBySpecies = apply(1, as.matrix(CUAggBySpecies[,66:74]), mean)
CUAggBySpecies[,66:74]
as.matrix(CUAggBySpecies[,66:74])
CUAggBySpecies = apply(2, as.matrix(CUAggBySpecies[,66:74]), mean)
CUAggBySpecies = apply(2, as.data.frame(CUAggBySpecies[,66:74]), mean)
as.data.frame(CUAggBySpecies[,66:74])
T = as.data.frame(CUAggBySpecies[,66:74])
T
CUAggBySpecies = apply(T, 1, mean)
CUAggBySpecies = apply(as.data.frame(CUAggBySpecies[,66:74]), 1, mean)
CUAggBySpecies = apply(as.matrix(CUAggBySpecies[,66:74]), 1, mean)
T = as.matrix(CUAggBySpecies[,66:74])
T = as.data.frame(CUAggBySpecies[,66:74])
## by hand:
## rename unitig_62_quiver_annotated_Trimmed_CURATED_ANNOTATIONS_..tsv into unitig_62_quiver_annotated_Trimmed_CURATED_ANNOTATIONS_Halicephalobus mephisto.tsv
## pachys_mito_Bracht_Curated_synthetic DNA construct_..tsv into pachys_mito_Bracht_Curated_synthetic DNA construct_Diploscapter pachys.tsv
rm(list=ls(all=TRUE))
CU <- read.table("../../Body/2Derived/CodonUsageDerived.csv", sep = ';', head = TRUE)
table(CU$OrganismName)
length(unique(CU$OrganismName)) # 37
table(CU$Strand)  #
table(CU$GenName) # should be 13
#atp6       ATP6       ATP8        cob       cox1       Cox1       COX1       cox2       COX2       cox3       COX3       CYTB  Dpa-atp-6
#1         36          7          1          1          1         33          1         34          1         34         34          1
#Dpa-ctb-1  Dpa-ctc-3 Dpa-ndfl-4 Dpa-nduo-1 Dpa-nduo-2 Dpa-nduo-5 Dpa-nduo-6       nad1       NAD1       nad2       NAD2       nad3       NAD3
#1          1          1          1          1          1          1          1          2          1          2          1          2
#nad4       NAD4      nad4L      NAD4L       nad5       NAD5       nad6       NAD6        ND1        ND2        ND3        ND4       ND4L
#1          2          1          2          1          2          1          2         32         32         36         33         32
#ND5        ND6       None
#32         32         12
#### -1 strand (who they are?) if we are sure => we just reverse compliment in the next step? For now we delete them
CU = CU[CU$Strand == 1,]
table(CU$OrganismName)
#### aggregate all data by species
names(CU)
CUAggByGenes = aggregate(CU[8:71], by = list(CU$GenName), FUN = sum) # as soon as gene names are good => check it better
CUAggBySpecies = aggregate(CU[8:71], by = list(CU$OrganismName), FUN = sum) # as soon as gene names are good => check it better
names(CUAggBySpecies)[1]='OrganismName'
### derive skew towards T for fourfold degenerate sites (expectation is 25%) (assume invertebrate genetic code, will remove homo sapiens later):
CUAggBySpecies$SerAG.T = CUAggBySpecies$AGT/(CUAggBySpecies$AGA+CUAggBySpecies$AGT+CUAggBySpecies$AGG+CUAggBySpecies$AGC) # AGX = Ser.AG
CUAggBySpecies$SerTC.T = CUAggBySpecies$TCT/(CUAggBySpecies$TCA+CUAggBySpecies$TCT+CUAggBySpecies$TCG+CUAggBySpecies$TCC) # AGX = Ser.TC
CUAggBySpecies$Leu.T = CUAggBySpecies$CTT/(CUAggBySpecies$CTA+CUAggBySpecies$CTT+CUAggBySpecies$CTG+CUAggBySpecies$CTC) # CTX = Leu
CUAggBySpecies$Pro.T = CUAggBySpecies$CCT/(CUAggBySpecies$CCA+CUAggBySpecies$CCT+CUAggBySpecies$CCG+CUAggBySpecies$CCC) # CCX = Pro
CUAggBySpecies$Arg.T = CUAggBySpecies$CGT/(CUAggBySpecies$CGA+CUAggBySpecies$CGT+CUAggBySpecies$CGG+CUAggBySpecies$CGC) # CGX == Arg (R)
CUAggBySpecies$Thr.T = CUAggBySpecies$ACT/(CUAggBySpecies$ACA+CUAggBySpecies$ACT+CUAggBySpecies$ACG+CUAggBySpecies$ACC) # ACX == Thr
CUAggBySpecies$Val.T = CUAggBySpecies$GTT/(CUAggBySpecies$GTA+CUAggBySpecies$GTT+CUAggBySpecies$GTG+CUAggBySpecies$GTC) # GTX == Val
CUAggBySpecies$Ala.T = CUAggBySpecies$GCT/(CUAggBySpecies$GCA+CUAggBySpecies$GCT+CUAggBySpecies$GCG+CUAggBySpecies$GCC) # GCX == Ala
CUAggBySpecies$Gly.T = CUAggBySpecies$GGT/(CUAggBySpecies$GGA+CUAggBySpecies$GGT+CUAggBySpecies$GGG+CUAggBySpecies$GGC) # GGX == Gly (G)
names(CUAggBySpecies)
T = as.data.frame(CUAggBySpecies[,66:74])
CUAggBySpecies$SkewTowardsT4Dsites = apply(T, 1, mean)
View(CUAggBySpecies)
CUAggBySpecies = CUAggBySpecies[order(CUAggBySpecies$SkewTowardsT4Dsites),]
View(CUAggBySpecies)
summary(CUAggBySpecies$SkewTowardsT4Dsites)
VecOfSpeciesWithMoreThan75PerCent = CUAggBySpecies$OrganismName[CUAggBySpecies$SkewTowardsT4Dsites > 0.75,]
VecOfSpeciesWithMoreThan75PerCent = CUAggBySpecies[CUAggBySpecies$SkewTowardsT4Dsites > 0.75,]$OrganismName
VecOfSpeciesWithMoreThan75PerCent
Champions = CUAggBySpecies[CUAggBySpecies$SkewTowardsT4Dsites > 0.75,]$OrganismName
Champions
